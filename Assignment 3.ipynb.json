{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9a50459",
   "metadata": {},
   "source": [
    "# **1. Why are functions advantageous to have in your programs?**\n",
    "\n",
    "**Ans:**- Below are the advantages of functions in programming:\n",
    "\n",
    "**1**. Functions reduce the need for duplicate code. This makes programs shorter, easier to read, and easier to update. The main advantage of functions is code Reusability.\n",
    "\n",
    "**2**.Increases program readability.\n",
    "Divide a complex problem into simpler ones.\n",
    "\n",
    "**3**.Reduces chances of error.\n",
    "\n",
    "**4**.Modifying a program becomes easier by using function\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdef0c20",
   "metadata": {},
   "source": [
    "# ***2. When does the code in a function run: when it's specified or when it's called?***\n",
    "\n",
    "**Ans:** The code in a function executes when the function is called, not when the function is specified. When a function is \"called\" the program \"leaves\" the current section of code and begins to execute the first line inside the function. Example is mentioned below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "02ddffaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rajat ineuron\n",
      "Ritik ineuron\n",
      "kartik ineuron\n"
     ]
    }
   ],
   "source": [
    "def my_function(fname):\n",
    "    print(fname + \" ineuron\")\n",
    "\n",
    "my_function(\"Rajat\")\n",
    "my_function(\"Ritik\")\n",
    "my_function(\"kartik\")\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c55d42c",
   "metadata": {},
   "source": [
    "# **3. What statement creates a function?**\n",
    "\n",
    "**Ans:** The `def` statement defines a function\n",
    "\n",
    "*Syntax of Function:*\n",
    "\n",
    " ```def function_name(parameters): ```\n",
    "   ``` \"\"\"doc string\"\"\" -----function body----- -----function body----- return value ```\n",
    " \n",
    "**Ex:-**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2b715d00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sudanshu ineuron Ai\n",
      "krish ineuron Ai\n"
     ]
    }
   ],
   "source": [
    "def function_name(fname):\n",
    "    print(fname + \" ineuron Ai\")\n",
    "function_name(\"Sudanshu\")\n",
    "function_name(\"krish\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcac307e",
   "metadata": {},
   "source": [
    "# **4. What is the difference between a function and a function call?**\n",
    "**Ans:** *1.* It is a block of code that does a particular operation and returns a result. \n",
    "\n",
    "*2.* It usually accepts inputs as parameters and returns a result. The parameters are not mandatory. A function call is the code used to pass control to a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "a9f6389d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Function\n",
    "def square(X):\n",
    "    return X*X\n",
    "square((5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c329cd",
   "metadata": {},
   "source": [
    "# **5. How many global scopes are there in a Python program? How many local scopes?**\n",
    "\n",
    "**Ans:** There is one global scope, and a local scope is created whenever a function is called. A variable created inside a function belongs to the local scope of that function, and can only be used inside that function whereas A variable created in the main body of the Python code is a global variable and belongs to the global scope."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "1a1c6b8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    }
   ],
   "source": [
    "#Example\n",
    "\n",
    "def my_function():\n",
    "    x =300\n",
    "    def myinner_function():\n",
    "        print(x)\n",
    "    myinner_function()\n",
    "    \n",
    "my_function()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "038f490e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "#Global Scope\n",
    "x=300\n",
    "def my_func():\n",
    "    print(x)\n",
    "    \n",
    "my_func()\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3490ac31",
   "metadata": {},
   "source": [
    "# **6. What happens to variables in a local scope when the function call returns?**\n",
    " **Ans:** \n",
    " *1.When a function returns, the local scope is destroyed, and all the variables in it are forgotten.*\n",
    " \n",
    " *2.A local variable becomes undefined after the function call completes.*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "452852db",
   "metadata": {},
   "source": [
    "# **7. What is the concept of a return value? Is it possible to have a return value in an expression?**\n",
    "**Ans:** The Python return statement is a key component of functions and methods. We can use the return statement to make functions send Python objects back to the caller code. These objects are known as the functionâ€™s return value. A return value is the value that a function call evaluates to. Like any value, a return value can be used as part of an expression."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c43410df",
   "metadata": {},
   "source": [
    "# **8. If a function does not have a return statement, what is the return value of a call to that function?**\n",
    "**Ans:** If there is no return statement for a function, its return value is None. The function always returns None if explicit return is not written."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7178a31a",
   "metadata": {},
   "source": [
    "# **9. How do you make a function variable refer to the global variable?**\n",
    "**Ans:** A global statement will force a variable in a function to refer to the global variable. If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ac265fa",
   "metadata": {},
   "source": [
    "# **10. What is the data type of None?**\n",
    "Ans: The data type of None is `NoneType`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98481aab",
   "metadata": {},
   "source": [
    "# **11. What does the sentence import areallyourpetsnamederic do?**\n",
    "**Ans:** That import statement imports a module named areallyourpetsnamederic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67206b4c",
   "metadata": {},
   "source": [
    "# **12. If you had a bacon() feature in a spam module, what would you call it after importing spam?**\n",
    "**Ans:** This function can be called with `spam.bacon()`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cceba226",
   "metadata": {},
   "source": [
    "# **13. What can you do to save a programme from crashing if it encounters an error?**\n",
    "**Ans:** We can place the line of code that might cause an error in a `try` clause and use `except` block to handle the error as mentioned below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d7f2bf61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    print(x)\n",
    "except:\n",
    "    print(\" An exception occurred\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51dfa9f1",
   "metadata": {},
   "source": [
    "# **14. What is the purpose of the try clause? What is the purpose of the except clause?**\n",
    "**Ans:** The code that could potentially cause an error goes in the `try` clause. The code that executes if an error happens goes in the `except` clause."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "f8aee661",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "800\n"
     ]
    }
   ],
   "source": [
    "x=800\n",
    "try:\n",
    "    print(x)\n",
    "except Nameerror:   \n",
    "    print(\"variable x is not defined\")\n",
    "except:\n",
    "    print(\"something else went wrong\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
